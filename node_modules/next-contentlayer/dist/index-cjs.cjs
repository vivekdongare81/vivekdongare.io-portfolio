const fileName_1 = "packages/next-contentlayer/src/index-cjs.ts";
let devServerStarted = false;
module.exports.withContentlayer =
    (_pluginOptions = {}) => (nextConfig = {}) => {
        // could be either `next dev` or just `next`
        const isNextDev = process.argv.includes('dev') || process.argv.some((_) => _.endsWith('/.bin/next'));
        const isBuild = process.argv.includes('build');
        return {
            ...nextConfig,
            // Since Next.js doesn't provide some kind of real "plugin system" we're (ab)using the `redirects` option here
            // in order to hook into and block the `next build` and initial `next dev` run.
            redirects: async () => {
                // NOTE since next.config.js doesn't support ESM yet, this "CJS -> ESM bridge" is needed
                const { runContentlayerBuild, runContentlayerDev } = await import('./plugin.js');
                if (isBuild) {
                    await runContentlayerBuild();
                }
                else if (isNextDev && !devServerStarted) {
                    devServerStarted = true;
                    // TODO also block here until first Contentlayer run is complete
                    runContentlayerDev();
                }
                return nextConfig.redirects?.() ?? [];
            },
            onDemandEntries: {
                maxInactiveAge: 60 * 60 * 1000,
                ...nextConfig.onDemandEntries, // use existing onDemandEntries config if provided by user
            },
            webpack(config, options) {
                config.watchOptions = {
                    ...config.watchOptions,
                    // ignored: /node_modules([\\]+|\/)+(?!\.contentlayer)/,
                    ignored: ['**/node_modules/!(.contentlayer)/**/*'],
                };
                // NOTE workaround for https://github.com/vercel/next.js/issues/17806#issuecomment-913437792
                // https://github.com/contentlayerdev/contentlayer/issues/121
                config.module.rules.push({
                    test: /\.m?js$/,
                    type: 'javascript/auto',
                    resolve: {
                        fullySpecified: false,
                    },
                });
                if (typeof nextConfig.webpack === 'function') {
                    return nextConfig.webpack(config, options);
                }
                return config;
            },
        };
    };
//# sourceMappingURL=index-cjs.js.map